#!/usr/bin/env bash

########################################################
# Build Time: Tue Nov  5 19:57:46 EST 2019
# Git Revision: c3a4e6089d9173503ee7b3d7f8e4b75115ad05fc
########################################################

#!/usr/bin/env bash
function woop() {
  echo "woop woop"
}
#!/usr/bin/env bash
# slit command to create directories and all necessary files to start homework
# Assume that we are in homework dir
function start()
{
	TEST_CASES_FOLDER="test-cases"
	TEST_RUN_OUT_FOLDER="test-run-out"

 	mkdir -p "$TEST_CASES_FOLDER"
 	mkdir -p "$TEST_RUN_OUT_FOLDER"
	TEST_CASE_NUM=1

	INPUT_MORE_TESTS="y"
	while [[ "$INPUT_MORE_TESTS" == "y" ]]; do 
		echo "----------------------------------------"
		echo "enter input for test case $TEST_CASE_NUM"
		echo "----------------------------------------"
		read INPUT_TEST_CASE
		echo $INPUT_TEST_CASE >> "$TEST_CASES_FOLDER/$TEST_CASE_NUM-in.txt"

		echo "-------------------------------------------"
		echo "enter expected out for input $TEST_CASE_NUM"
		echo "-------------------------------------------"
		read INPUT_EXP_OUT
		echo $INPUT_EXP_OUT >> "$TEST_CASES_FOLDER/$TEST_CASE_NUM-expected-out.txt"

		echo "-------------------------------------------"
		echo "enter expected err for input $TEST_CASE_NUM"
		echo "-------------------------------------------"
		read INPUT_EXP_ERR
		echo $INPUT_EXP_ERR >> "$TEST_CASES_FOLDER/$TEST_CASE_NUM-expected-err.txt"

		read -r -p "Do you have more test cases to enter? [y/N] " INPUT_MORE_TESTS
		TEST_CASE_NUM=$(($TEST_CASE_NUM + 1))
	done

}

# =main
function init()
{
	echo "Are you in desired homework directory? [y/N] " 
	read RESPONSE
	if [[ "$RESPONSE" == "y" ]];
	then
		start
	else
		echo "Please navigate to your desired Homework Directory and run again" #with -stupid ("you piece of shit")
	fi
}
#!/usr/bin/env bash
function test() {
  TEST_NUM=1
  TEST_CASES_DIR="test-cases"
  TEST_OUT_DIR="test-runs"

  # check that test-cases directory exists
  if [[ -z $(ls $TEST_CASES_DIR 2> /dev/null) ]]; then

    # Print error if no command (route) found
    RED='\033[0;33m'
    NC='\033[0m' # No Color
    printf "${RED}Error: directory $TEST_CASES_DIR does not exist${NC}\n"
    exit 0
  fi

  # assume test-cases already exists
  # promp the user to input test cases

  mkdir -p $TEST_OUT_DIR

  # while test exists, incrememnt
  CONTINUE_TESTING=1
  while [[ $CONTINUE_TESTING -eq 1 ]]; do

    # test and compare
    echo ""
    echo "--------------------------"
    echo "RUNNING TEST NUMBER: $TEST_NUM"
    echo "--------------------------"
    echo ""

    # in,out,expected paths
    IN="$TEST_CASES_DIR/$TEST_NUM-in.txt"
    OUT="$TEST_OUT_DIR/$TEST_NUM-out.txt"
    EXPECTED="$TEST_CASES_DIR/$TEST_NUM-out.txt"

    # run hw and diff output with test case

    # allow multiple input types in future (stdin & cli args)
    ./a.out < $IN &> $OUT
    colordiff $OUT $EXPECTED -y --width=80

    # increment test
    TEST_NUM=$(($TEST_NUM + 1))

    # if another test exists, continue
    TEST_CHECK=$(ls "$TEST_CASES_DIR/$TEST_NUM-in.txt" 2> /dev/null)
    if [[ -z "$TEST_CHECK" ]]; then
      CONTINUE_TESTING=0
    fi
  done
}
#!/usr/bin/env bash

COMMAND=$1
ARGS=${@:2}

if [[ "$COMMAND" == "test" ]]; then
  test $ARGS
  exit 0
fi

if [[ "$COMMAND" == "woop" ]]; then
  woop $ARGS
  exit 0
fi

if [[ -z "$COMMAND" ]]; then
  # here is where we show the manual
  # man slit (we may also need to add a man entry :) )
  echo "woop is the only command right now. woop woop"
  exit 0
fi

if [[ "$COMMAND" == "init" ]]; then
  init $ARGS
  exit 0
fi

# Print error if no command (route) found
RED='\033[0;31m'
NC='\033[0m' # No Color
printf "${RED}Sorry, cmd [$COMMAND] not found${NC}\n"
exit 1
